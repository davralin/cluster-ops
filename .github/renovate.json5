{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended",
    "docker:enableMajor",
    ":automergeBranch",
    ":disableRateLimiting"
  ],
  "dependencyDashboardTitle": "Renovate Dashboard",
  "assigneesFromCodeOwners": true,
  // Since we don't have tests, and we want automerge enabled
  "ignoreTests": true,
  "flux": {
    "fileMatch": [
      "kubernetes/.+\\.yaml$"
    ]
  },
  "helm-values": {
    "fileMatch": [
      "kubernetes/.+\\.yaml$"
    ]
  },
  "kubernetes": {
    "fileMatch": [
      "kubernetes/.+\\.yaml$"
    ]
  },
  "packageRules": [
    {
      "description": [
        "Loose versioning for non-semver packages"
      ],
      "matchDatasources": [
        "docker"
      ],
      "versioning": "loose",
      "matchPackagePatterns": [
        "metube",
        "plex",
        "searxng"
      ]
    },
    {
      "description": [
        "Auto-merge container digests updates for trusted containers"
      ],
      "matchDatasources": [
        "docker"
      ],
      "automerge": true,
      "automergeType": "branch",
      "matchUpdateTypes": [
        "digest"
      ],
      "matchPackagePatterns": [
        "atdr.meo.ws/archiveteam/warrior-dockerfile",
        "docker.io/redis",
        "docker.io/searxng/searxng",
        "docker.io/tensorchord/pgvecto-rs",
        "ghcr.io/alexta69/metube",
        "ghcr.io/corentinth/it-tools",
        "ghcr.io/davralin",
        "ghcr.io/meshtastic/web",
        "ghcr.io/home-operations",
        "ghcr.io/rss-bridge/rss-bridge",
        "ghcr.io/sdr-enthusiasts",
        "ghcr.io/thelounge/thelounge",
        "quay.io/invidious/invidious-companion"
      ]
    },
    {
      "description": [
        "Auto-merge container patch for trusted containers"
      ],
      "matchDatasources": [
        "docker"
      ],
      "automerge": true,
      "automergeType": "branch",
      "matchUpdateTypes": [
        "patch"
      ],
      "matchPackagePatterns": [
        "ghcr.io/home-operations"
      ]
    },
    {
      "description": [
        "Auto-merge fix-updates for trusted containers"
      ],
      "matchDatasources": [
        "docker"
      ],
      "automerge": true,
      "automergeType": "branch",
      "matchUpdateTypes": [
        "patch"
      ],
      "matchPackagePatterns": [
        "docker.io/adguard/adguardhome",
        "docker.io/filebrowser/filebrowser",
        "docker.io/icloudpd/icloudpd",
        "docker.io/ollama/ollama",
        "docker.io/searxng/searxng",
        "docker.io/thewicklowwolf/lidatube",
        "ghcr.io/alexta69/metube",
        "ghcr.io/bakito/adguardhome-sync",
        "ghcr.io/cloudnative-pg/postgresql",
        "ghcr.io/coder/code-server",
        "ghcr.io/dgtlmoon/changedetection.io",
        "ghcr.io/ersatztv/ersatztv",
        "ghcr.io/esphome/esphome",
        "ghcr.io/fallenbagel/jellyseerr",
        "ghcr.io/foxxmd/multi-scrobbler",
        "ghcr.io/go-gitea/gitea",
        "ghcr.io/jlesage/firefox",
        "ghcr.io/home-assistant/home-assistant",
        "ghcr.io/music-assistant/server",
        "ghcr.io/open-webui/open-webui",
        "ghcr.io/paperless-ngx/paperless-ngx",
        "ghcr.io/rommapp/romm",
        "ghcr.io/stuffanthings/qbit_manage",
        "ghcr.io/syncthing/syncthing",
        "ghcr.io/tautulli/tautulli",
        "ghcr.io/thecfu/scraparr",
        "ghcr.io/unpoller/unpoller",
        "quay.io/minio/minio",
        "grafana/grafana"
      ]
    },
    {
      "description": [
        "Auto-merge fix-updates for trusted helmers"
      ],
      "matchDatasources": [
        "helm"
      ],
      "automerge": true,
      "automergeType": "branch",
      "matchUpdateTypes": [
        "patch"
      ],
      "matchPackagePatterns": [
        "awx-operator",
        "cert-manager",
        "grafana",
        "kube-prometheus-stack",
        "minecraft",
        "node-feature-discovery",
        "reflector",
        "rook-ceph",
        "valkey"
      ]
    },
    {
      "matchDatasources": [
        "docker"
      ],
      "matchUpdateTypes": [
        "major"
      ],
      "commitMessagePrefix": "feat(container)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": " ( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchDatasources": [
        "docker"
      ],
      "matchUpdateTypes": [
        "minor"
      ],
      "commitMessagePrefix": "feat(container): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": " ( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchDatasources": [
        "docker"
      ],
      "matchUpdateTypes": [
        "patch"
      ],
      "commitMessagePrefix": "fix(container): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": " ( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchDatasources": [
        "docker"
      ],
      "matchUpdateTypes": [
        "digest"
      ],
      "commitMessagePrefix": "chore(container): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentDigestShort}} → {{newDigestShort}} )"
    },
    {
      "matchDatasources": [
        "helm"
      ],
      "matchUpdateTypes": [
        "major"
      ],
      "commitMessagePrefix": "feat(helm)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchDatasources": [
        "helm"
      ],
      "matchUpdateTypes": [
        "minor"
      ],
      "commitMessagePrefix": "feat(helm): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchDatasources": [
        "helm"
      ],
      "matchUpdateTypes": [
        "patch"
      ],
      "commitMessagePrefix": "fix(helm): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchManagers": [
        "github-actions"
      ],
      "matchUpdateTypes": [
        "major"
      ],
      "commitMessagePrefix": "feat(github-action)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchManagers": [
        "github-actions"
      ],
      "matchUpdateTypes": [
        "minor"
      ],
      "commitMessagePrefix": "feat(github-action): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchManagers": [
        "github-actions"
      ],
      "matchUpdateTypes": [
        "patch"
      ],
      "commitMessagePrefix": "fix(github-action)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "description": [
        "Custom versioning for minio"
      ],
      "matchDatasources": [
        "docker"
      ],
      "versioning": "regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T.*Z$",
      "matchPackagePatterns": [
        "minio"
      ]
    },
    {
      "addLabels": [
        "renovate/grafana-dashboard"
      ],
      "automerge": true,
      "automergeType": "branch",
      "matchDatasources": [
        "custom.grafana-dashboards"
      ],
      "matchUpdateTypes": [
        "major"
      ],
      "semanticCommitType": "chore",
      "semanticCommitScope": "grafana-dashboards",
      "commitMessageTopic": "dashboard {{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    }
  ],
  "customDatasources": {
    "grafana-dashboards": {
      "defaultRegistryUrlTemplate": "https://grafana.com/api/dashboards/{{packageName}}",
      "format": "json",
      "transformTemplates": [
        "{\"releases\":[{\"version\": $string(revision)}]}"
      ]
    }
  },
  "customManagers": [
    {
      "customType": "regex",
      "description": [
        "Process CloudnativePG Postgresql version"
      ],
      "fileMatch": [
        "kubernetes/.+\\.yaml$"
      ],
      "matchStrings": [
        "imageName: (?<depName>\\S+):(?<currentValue>.*\\-.*)"
      ],
      "datasourceTemplate": "docker",
      "versioningTemplate": "redhat"
    },
    {
      "customType": "regex",
      "description": [
        "Process Grafana dashboards"
      ],
      "fileMatch": [
        "(^|/)kubernetes/.+\\.ya?ml$"
      ],
      "matchStrings": [
        "depName=\"(?<depName>.*)\"\\n(?<indentation>\\s+)gnetId: (?<packageName>\\d+)\\n.+revision: (?<currentValue>\\d+)"
      ],
      "autoReplaceStringTemplate": "depName=\"{{{depName}}}\"\n{{{indentation}}}gnetId: {{{packageName}}}\n{{{indentation}}}revision: {{{newValue}}}",
      "datasourceTemplate": "custom.grafana-dashboards",
      "versioningTemplate": "regex:^(?<major>\\d+)$"
    },
    {
      "customType": "regex",
      "description": "Process Immich helm-chart tags",
      "fileMatch": [
        "(^|/)kubernetes/.+\\.ya?ml$"
      ],
      "matchStrings": [
        "# renovate: datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)(?: versioning=(?<versioning>\\S+))?\\n(?<variable>\\w+): (?<currentValue>\\S+)"
      ]
    },
    {
      "customType": "regex",
      "description": "Process custom ansible role-dependencies",
      "fileMatch": [
        "(^|/)ansible/.+\\.ya?ml$"
      ],
      "matchStrings": [
        "# renovate: datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)(?: versioning=(?<versioning>\\S+))?\\n(?<variable>\\w+): (?<currentValue>\\S+)"
      ]
    },
    {
      "customType": "regex",
      "description": "Process custom kubernetes role-dependencies",
      "fileMatch": [
        "(^|/)kubernetes/.+\\.ya?ml$"
      ],
      "matchStrings": [
        "# renovate: datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)(?: versioning=(?<versioning>\\S+))?\\n\\s+(?<variable>\\w+): (?<currentValue>\\S+)"
      ]
    }
  ]
}
