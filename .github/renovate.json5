{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended",
    "docker:enableMajor",
    ":automergeBranch",
    ":disableRateLimiting"
  ],
  "dependencyDashboardTitle": "Renovate Dashboard",
  "assigneesFromCodeOwners": true,
  // Since we don't have tests, and we want automerge enabled
  "ignoreTests": true,
  "flux": {
    "fileMatch": [
      "cluster/.+\\.yaml$"
    ]
  },
  "helm-values": {
    "fileMatch": [
      "cluster/.+\\.yaml$"
    ]
  },
  "kubernetes": {
    "fileMatch": [
      "cluster/.+\\.yaml$"
    ]
  },
  "packageRules": [
    {
      "description": ["Auto-merge container digests updates for trusted containers"],
      "matchDatasources": ["docker"],
      "automerge": true,
      "automergeType": "branch",
      "matchUpdateTypes": ["digest"],
      "matchPackagePatterns": [
	      "ghcr.io/corentinth/it-tools",
	      "ghcr.io/davralin",
	      "ghcr.io/onedr0p",
	      "ghcr.io/sdr-enthusiasts",
	      "docker.io/redis"
      ]
    },
    {
      "description": ["Auto-merge fix-updates for trusted containers"],
      "matchDatasources": ["docker"],
      "automerge": true,
      "automergeType": "branch",
      "matchUpdateTypes": ["patch"],
      "matchPackagePatterns": [
	      "ghcr.io/esphome/esphome",
	      "ghcr.io/home-assistant/home-assistant"
      ]
    },
    {
      "description": ["Auto-merge fix-updates for trusted helmers"],
      "matchDatasources": ["helm"],
      "automerge": true,
      "automergeType": "branch",
      "matchUpdateTypes": ["patch"],
      "matchPackagePatterns": [
	      "awx-operator",
	      "grafana"
      ]
    },
    {
      "description": "Use custom versioning for Firefly iii",
      "matchDepNames": ["fireflyiii/core"],
      "versioning": "regex:^version-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$"
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(container)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": " ( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["minor"],
      "commitMessagePrefix": "feat(container): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": " ( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["patch"],
      "commitMessagePrefix": "fix(container): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": " ( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["digest"],
      "commitMessagePrefix": "chore(container): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentDigestShort}} → {{newDigestShort}} )"
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(helm)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["minor"],
      "commitMessagePrefix": "feat(helm): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["patch"],
      "commitMessagePrefix": "fix(helm): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchManagers": ["github-actions"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(github-action)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchManagers": ["github-actions"],
      "matchUpdateTypes": ["minor"],
      "commitMessagePrefix": "feat(github-action): ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "matchManagers": ["github-actions"],
      "matchUpdateTypes": ["patch"],
      "commitMessagePrefix": "fix(github-action)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} → {{newVersion}} )"
    },
    {
      "description": ["Custom versioning for minio"],
      "matchDatasources": ["docker"],
      "versioning": "regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T.*Z$",
      "matchPackagePatterns": ["minio"]
    }
  ],
  "customManagers": [
    {
      "customType": "regex",
      "description": ["Process CloudnativePG Postgresql version"],
      "fileMatch": [
        "cluster/.+\\.yaml$"
      ],
      "matchStrings": [
        "imageName: (?<depName>\\S+):(?<currentValue>.*\\-.*)"
      ],
      "datasourceTemplate": "docker",
      "versioningTemplate": "redhat"
    }
  ],
  "regexManagers": [
    {
      "fileMatch": [
        ".*\\.yaml$",
      ],
      "matchStrings": [
        "#\\s+renovate:\\s+depName=\"(?<depName>.*)\"\\n\\s+gnetId:\\s+(?<packageName>.*?)\\n\\s+revision:\\s+(?<currentValue>.*)"
      ],
      "versioningTemplate": "regex:^(?<major>\\d+)$",
      "datasourceTemplate": "custom.grafana-dashboards"
    },
  ],
  "customDatasources": {
    "grafana-dashboards": {
      "defaultRegistryUrlTemplate": "https://grafana.com/api/dashboards/{{packageName}}",
      "format": "json",
      "transformTemplates": [
        "{\"releases\":[{\"version\": $string(revision)}]}"
      ],
    },
  },
}
