---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 65.1.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 15m
  targetNamespace: monitoring
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    crds: CreateReplace
    remediation:
      retries: 3
  values:
    fullnameOverride: "kube-prom"
    alertmanager:
      config:
        receivers:
          - name: "Discord"
            discord_configs:
              - webhook_url: "${SECRET_DISCORD_ALERTMANAGER_URL}"
                title: |-
                  [{{ .Status | toUpper }}:{{ if eq .Status "firing" }}{{ .Alerts.Firing | len }}{{ else }}{{ .Alerts.Resolved | len }}{{ end }}]
                message: |-
                  {{- range .Alerts }}
                    **{{ .Labels.alertname }} {{ if ne .Labels.severity "" }}({{ .Labels.severity | title }}){{ end }} **
                    {{ if ne .Labels.namespace "" }}**Namespace: ** {{ .Labels.namespace | title }} {{ end }}
                    {{- if ne .Annotations.description "" }}
                      **Description:** {{ .Annotations.description }}
                    {{- else if ne .Annotations.message "" }}
                      **Message:** {{ .Annotations.message }}
                    {{- else if ne .Annotations.summary "" }}
                      **Summary:** {{ .Annotations.summary }}
                    {{- else }}
                      **Description:** N/A
                    {{- end }}
                  {{- end }}
          - name: "healthchecksio"
            webhook_configs:
              - send_resolved: true
                url: "${SECRET_ALERTMANAGER_HEALTHCHECKS_IO}"
          - name: "uar"
            webhook_configs:
              - url: http://uncomplicated-alert-receiver.monitoring.svc.cluster.local:8080/alerts
                send_resolved: false
        route:
          group_by: ["..."]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "uar"
          routes:
            - receiver: "healthchecksio"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog|CephNodeNetworkPacketDrops|CephPGImbalance|NodeCPUHighUsage|KubernetesHostHighCPUUsage|KubeCPUOvercommit|NodeDiskIOSaturation"
            - receiver: "healthchecksio"
              matchers:
                - alertname ="AlertmanagerClusterFailedToSendAlerts|AlertmanagerFailedToSendAlerts"
            - receiver: "uar"
              matchers:
                - severity = "critical|warning"
              continue: true
            - receiver: "uar"
              matchers:
                - severity = "critical|warning"
              continue: true
      ingress:
        enabled: true
        pathType: Prefix
        annotations:
          haproxy.org/allow-list: "${HAPROXY_WHITELIST}"
          haproxy.org/response-set-header: |
            Strict-Transport-Security "max-age=31536000"
            X-Frame-Options "DENY"
            X-Content-Type-Options "nosniff"
            Referrer-Policy "no-referrer-when-downgrade"
        hosts:
         - "alertmanager.${SECRET_DEFAULT_DOMAIN}"
        tls:
          - secretName: "${SECRET_DEFAULT_DOMAIN_CERT}"
    defaultRules:
      create: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 10.0.1.67
        - 10.0.1.68
        - 10.0.1.69
    kubeEtcd:
      enabled: true
      endpoints:
        - 10.0.1.67
        - 10.0.1.68
        - 10.0.1.69
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    kubelet:
      enabled: true
    kube-state-metrics:
      enabled: true
    kubeProxy:
      enabled: true
      endpoints: []
      service:
        enabled: true
        port: 10249
        targetPort: 10249
        selector:
          k8s-app: kube-proxy
    kubeScheduler:
      enabled: true
      endpoints:
        - 10.0.1.67
        - 10.0.1.68
        - 10.0.1.69
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          relabelings:
            - sourceLabels: [__meta_kubernetes_pod_node_name]
              action: replace
              targetLabel: instance
    grafana:
      enabled: false
      forceDeployDashboards: true
    prometheus:
      ingress:
        enabled: true
        annotations:
          haproxy.org/allow-list: "${HAPROXY_WHITELIST}"
          haproxy.org/response-set-header: |
            Strict-Transport-Security "max-age=31536000"
            X-Frame-Options "DENY"
            X-Content-Type-Options "nosniff"
            Referrer-Policy "no-referrer-when-downgrade"
        hosts:
          - "prometheus.${SECRET_DEFAULT_DOMAIN}"
        tls:
          - secretName: "${SECRET_DEFAULT_DOMAIN_CERT}"
      prometheusSpec:
        retention: 31d
        retentionSize: 40GB
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "${STORAGE_READWRITEONCE}"
              resources:
                requests:
                  storage: 100Gi
        additionalScrapeConfigs:
          - job_name: node-exporter
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - mierin.w.ot:8404 # Haproxy
                  - mierin.w.ot:9100
                  - mierin.w.ot:9153 # DNSMasq
                  - mierin.w.ot:9586 # WireGuard
                  - nas.${SECRET_PRIVATE_DOMAIN}:9100
                  - nas.${SECRET_OFFSITE_DOMAIN}:9100
                  - proxmox.${SECRET_PRIVATE_DOMAIN}:9100
        scrapeConfigSelector: {}
        scrapeConfigNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
