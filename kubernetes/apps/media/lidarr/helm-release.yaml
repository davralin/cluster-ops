---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name lidarr
  namespace: flux-system
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 4.2.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
      interval: 30m
  targetNamespace: media
  install:
    createNamespace: true
    remediation:
      retries: 10
  upgrade:
    remediation:
      retries: 10
  valuesFrom:
    - targetPath: controllers.lidarr.containers.lidarr.env.LIDARR__POSTGRES__PASSWORD
      kind: Secret
      name: lidarr-config
      valuesKey: POSTGRES_PASSWORD
  values:
    fullnameOverride: *name
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      hostname: *name
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
    controllers:
      lidarr:
        containers:
          lidarr:
            image:
              repository: ghcr.io/home-operations/lidarr
              tag: 2.13.2.4685@sha256:af72fba52ef9e438a8c010f77a43bb3910da7c31cbf30d90cbcf0b351a82d4d6
            env:
              TZ: "${TIMEZONE}"
              LIDARR__AUTH__APIKEY: "${SECRET_LIDARR_API_KEY}"
              LIDARR__POSTGRES__HOST: media-postgres-v17-rw.media.svc.cluster.local
              LIDARR__POSTGRES__PORT: "5432"
              LIDARR__POSTGRES__USER: "lidarr"
              LIDARR__POSTGRES__MAIN_DB: lidarr_main
              LIDARR__AUTH__METHOD: External
              LIDARR__AUTH__REQUIRED: DisabledForLocalAddresses
              # https://github.com/Lidarr/Lidarr/issues/4785
              LIDARR__LOG__DBENABLED: "False"
              LIDARR__LOG__LEVEL: info
            securityContext:
              allowPrivilegeEscalation: false
              # System.IO.IOException: Read-only file system
              readOnlyRootFilesystem: false
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
                memory: 300Mi
              limits:
                memory: 600Mi
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: 8686
                  initialDelaySeconds: 50
                  periodSeconds: 10
                  timeoutSeconds: 10
                  failureThreshold: 3
              readiness: *probes
    service:
      lidarr:
        controller: *name
        ports:
          http:
            port: 8686
    ingress:
      lidarr:
        enabled: true
        annotations:
          haproxy.org/allow-list: "${HAPROXY_WHITELIST}"
          haproxy.org/ssl-redirect-port: "443"
          haproxy.org/response-set-header: |
            Strict-Transport-Security "max-age=31536000"
            X-Frame-Options "DENY"
            X-Content-Type-Options "nosniff"
            Referrer-Policy "strict-origin-when-cross-origin"
        hosts:
          - host: &host "lidarr.${SECRET_DEFAULT_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: lidarr
                  port: http
        tls:
          - hosts:
              - *host
    persistence:
      config:
        enabled: true
        existingClaim: lidarr
      media:
        enabled: true
        existingClaim: media
        globalMounts:
          - path: /data
