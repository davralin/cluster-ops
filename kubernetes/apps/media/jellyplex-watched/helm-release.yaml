---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name jellyplex-watched
  namespace: flux-system
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
      interval: 30m
  targetNamespace: media
  install:
    createNamespace: true
    remediation:
      retries: 10
  upgrade:
    remediation:
      retries: 10
  values:
    fullnameOverride: *name
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
    controllers:
      jellyplex-watched:
        containers:
          jellyplex-watched:
            image:
              repository: ghcr.io/luigi311/jellyplex-watched
              tag: 7.0.3
            env:
              TZ: "${TIMEZONE}"
              ## Do not mark any shows/movies as played and instead just output to log if they would of been marked.
              DRYRUN: "False"
              ## Additional logging information
              DEBUG: "True"
              ## Debugging level, "info" is default, "debug" is more verbose
              DEBUG_LEVEL: "debug"
              ## How often to run the script in seconds
              #SLEEP_DURATION: "3600"
              SLEEP_DURATION: "21600"
              ## Log file where all output will be written to
              LOGFILE: "/tmp/log.log"
              ## Map usernames between plex and jellyfin in the event that they are different, order does not matter
              #USER_MAPPING: { "testuser2": "testuser3" }
              USER_MAPPING: '{ "${SECRET_PLEX_USER}": "${SECRET_JELLYFIN_USER}" }'
              ## Map libraries between plex and jellyfin in the even that they are different, order does not matter
              #LIBRARY_MAPPING: { "Shows": "TV Shows" }
              LIBRARY_MAPPING: '{ "Shows": "TV-Shows" }'
              ## Recommended to use token as it is faster to connect as it is direct to the server instead of going through the plex servers
              ## URL of the plex server, use hostname or IP address if the hostname is not resolving correctly
              ## Comma seperated list for multiple servers
              #PLEX_BASEURL: "http://localhost:32400"
              PLEX_BASEURL: "https://plex.media.svc.cluster.local:32400"
              ## Plex token https://support.plex.tv/articles/204059436-finding-an-authentication-token-x-plex-token/
              #PLEX_TOKEN: "SuperSecretToken"
              PLEX_TOKEN: "${SECRET_PLEX_TOKEN}"
              ## If not using plex token then use username and password of the server admin along with the servername
              #PLEX_USERNAME: ""
              #PLEX_PASSWORD: ""
              #PLEX_SERVERNAME: "Plex Server"
              ## Skip hostname validation for ssl certificates.
              SSL_BYPASS: "True"
              ## Jellyfin server URL, use hostname or IP address if the hostname is not resolving correctly
              ## Comma seperated list for multiple servers
              JELLYFIN_BASEURL: "http://jellyfin.media.svc.cluster.local:8096"
              ## Jellyfin api token, created manually by logging in to the jellyfin server admin dashboard and creating an api key
              #JELLYFIN_TOKEN: "SuperSecretToken"
              JELLYFIN_TOKEN: "${SECRET_JELLYFIN_TOKEN}"
              ## Blacklisting/Whitelisting libraries, library types such as Movies/TV Shows, and users. Mappings apply so if the mapping for the user or library exist then both will be excluded.
              #BLACKLIST_LIBRARY: ""
              WHITELIST_LIBRARY: "Movies,TV-Shows,Shows"
              #BLACKLIST_LIBRARY_TYPE: ""
              #WHITELIST_LIBRARY_TYPE: ""
              #BLACKLIST_USERS: ""
              #WHITELIST_USERS: "testuser1,testuser2"
            securityContext:
              allowPrivilegeEscalation: false
              # [ERROR]: [Errno 30] Read-only file system: 'log.log'
              readOnlyRootFilesystem: false
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
                memory: 200Mi
              limits:
                memory: 300Mi