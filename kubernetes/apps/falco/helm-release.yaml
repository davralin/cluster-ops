---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name falco
  namespace: flux-system
spec:
  interval: 30m
  chart:
    spec:
      chart: falco
      version: 4.20.1
      sourceRef:
        kind: HelmRepository
        name: falco-charts
        namespace: flux-system
      interval: 30m
  targetNamespace: falco
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 10
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 10
  uninstall:
    keepHistory: false
  values:
    fullnameOverride: *name
    metrics:
      enabled: "${MONITORING_PROMETHEUS}"
    serviceMonitor:
      create: "${MONITORING_PROMETHEUS}"
    grafana:
      dashboards:
        enabled: "${MONITORING_PROMETHEUS}"
    falco:
      http_output:
        enabled: true
        url: "http://sidekick.falco.svc.cluster.local:2801/"
    falcoctl:
      artifact:
        install:
          enabled: true
        follow:
          enabled: true
      config:
        artifact:
          install:
            refs: [falco-rules:latest, falco-incubating-rules:latest, k8saudit-rules:latest]
          follow:
            refs: [falco-rules:latest, falco-incubating-rules:latest, k8saudit-rules:latest]
    falcosidekick:
      enabled: true
      fullnameOverride: "sidekick"
      grafana:
        dashboards:
          enabled: "${MONITORING_PROMETHEUS}"
      prometheusRules:
        enabled: "${MONITORING_PROMETHEUS}"
      serviceMonitor:
        create: "${MONITORING_PROMETHEUS}"
      replicaCount: 1
      config:
        discord:
          webhookurl: "${SECRET_DISCORD_FALCO_URL}"
        loki:
          grafanaDashboard:
            enabled: false
      webui:
        enabled: true
        ingress:
          enabled: true
          annotations:
            haproxy.org/allow-list: "${HAPROXY_WHITELIST}"
            haproxy.org/response-set-header: |
              Strict-Transport-Security "max-age=31536000"
              X-Frame-Options "DENY"
              X-Content-Type-Options "nosniff"
              Referrer-Policy "no-referrer-when-downgrade"
          hosts:
            - host: &host "falco.${SECRET_DEFAULT_DOMAIN}"
              paths:
                - path: /
                  service:
                    identifier: app
                    port: http
          tls:
            - hosts:
                - *host
        replicaCount: 1
        redis:
          storageEnabled: false
    tty: true
    customRules:
      custom-rules.yaml: |-
        - rule: Contact K8S API Server From Container
          desc: >
            Detect attempts to communicate with the K8S API Server from a container by non-profiled users. Kubernetes APIs play a
            pivotal role in configuring the cluster management lifecycle. Detecting potential unauthorized access to the API server
            is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server
            might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the
            Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data
            source for detections within the control plane.
            This rule is tailored to my lab
          condition: >
            evt.type=connect and evt.dir=<
            and (fd.typechar=4 or fd.typechar=6)
            and container
            and k8s_api_server
            and not k8s_containers
            and not user_known_contact_k8s_api_server_activities
            and not (k8s.ns.name = "awx" and container.name = "awx-task")
            and not (k8s.ns.name = "monitoring" and (container.name = "grafana-sc-dashboard" or container.name = "grafana-sc-datasources"))
            and not (k8s.ns.name = "node-problem-detector" and container.name = "node-problem-detector")
          output: Unexpected connection to K8s API Server from container (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)
          priority: NOTICE
          tags: [maturity_stable, container, network, k8s, mitre_discovery, T1565]
        - rule: Run shell untrusted
          desc: >
            An attempt to spawn a shell below a non-shell application. The non-shell applications that are monitored are
            defined in the protected_shell_spawner macro, with protected_shell_spawning_binaries being the list you can
            easily customize. For Java parent processes, please note that Java often has a custom process name. Therefore,
            rely more on proc.exe to define Java applications. This rule can be noisier, as you can see in the exhaustive
            existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch
            general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise.
            Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your
            long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the
            direct parent process being a non-shell application could make the rule more robust.
          condition: >
            spawned_process
            and shell_procs
            and proc.pname exists
            and protected_shell_spawner
            and not proc.pname in (shell_binaries, gitlab_binaries, cron_binaries, user_known_shell_spawn_binaries,
                                  needrestart_binaries,
                                  mesos_shell_binaries,
                                  erl_child_setup, exechealthz,
                                  PM2, PassengerWatchd, c_rehash, svlogd, logrotate, hhvm, serf,
                                  lb-controller, nvidia-installe, runsv, statsite, erlexec, calico-node,
                                  "puma reactor")
            and not proc.cmdline in (known_shell_spawn_cmdlines)
            and not proc.aname in (unicorn_launche)
            and not consul_running_net_scripts
            and not consul_running_alert_checks
            and not nginx_starting_nginx
            and not nginx_running_aws_s3_cp
            and not run_by_package_mgmt_binaries
            and not serf_script
            and not check_process_status
            and not run_by_foreman
            and not python_mesos_marathon_scripting
            and not splunk_running_forwarder
            and not postgres_running_wal_e
            and not redis_running_prepost_scripts
            and not rabbitmq_running_scripts
            and not rabbitmqctl_running_scripts
            and not run_by_appdynamics
            and not user_shell_container_exclusions
            and not (container.image.repository = "ghcr.io/cloudnative-pg/postgresql" and container.name = "postgres")
          output: Shell spawned by untrusted binary (parent_exe=%proc.pexe parent_exepath=%proc.pexepath pcmdline=%proc.pcmdline gparent=%proc.aname[2] ggparent=%proc.aname[3] aname[4]=%proc.aname[4] aname[5]=%proc.aname[5] aname[6]=%proc.aname[6] aname[7]=%proc.aname[7] evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)
          priority: NOTICE
          tags: [maturity_stable, host, container, process, shell, mitre_execution, T1059.004]
        - rule: Redirect STDOUT/STDIN to Network Connection in Container
          desc: >
            Detect redirection of stdout/stdin to a network connection within a container, achieved by utilizing a
            variant of the dup syscall (potential reverse shell or remote code execution
            https://github.com/swisskyrepo/PayloadsAllTheThings/). This detection is behavior-based and may generate
            noise in the system, and can be adjusted using the user_known_stand_streams_redirect_activities template
            macro. Tuning can be performed similarly to existing detections based on process lineage or container images,
            and/or it can be limited to interactive tty (tty != 0).
          condition: >
            dup
            and container
            and evt.rawres in (0, 1, 2)
            and fd.type in ("ipv4", "ipv6")
            and not user_known_stand_streams_redirect_activities
            and not (container.image.repository = "ghcr.io/davalin/sshd" and proc.exepath = "/usr/sbin/sshd")
          output: Redirect stdout/stdin to network connection (gparent=%proc.aname[2] ggparent=%proc.aname[3] gggparent=%proc.aname[4] fd.sip=%fd.sip connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)
          priority: NOTICE
          tags: [maturity_stable, container, network, process, mitre_execution, T1059]