---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name freshrss-postgres-v17
  namespace: flux-system
spec:
  interval: 30m
  chart:
    spec:
      chart: raw
      version: v0.3.2
      sourceRef:
        kind: HelmRepository
        name: dysnix-charts
        namespace: flux-system
      interval: 30m
  targetNamespace: &namespace freshrss
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  dependsOn:
    - name: cloudnative-pg
      namespace: flux-system
  values:
    resources:
      - apiVersion: postgresql.cnpg.io/v1
        kind: Cluster
        metadata:
          name: *name
          namespace: *namespace
        spec:
          # using only 1 replica: very difficult to drain the node where postgres is running
          # using more than 1 replica: write amplification issues when leveraging replicated storage (e.g. ceph)
          instances: 2
          imageName: ghcr.io/cloudnative-pg/postgresql:17.4-6
          primaryUpdateStrategy: unsupervised
          storage:
            size: 10Gi
            storageClass: "${STORAGE_READWRITEONCE}"
          managed:
            roles:
              - name: freshrss
                login: true
                passwordSecret:
                  name: freshrss-basic-auth
          superuserSecret:
            name: *name
          bootstrap:
            # use this to start a new cluster
            #initdb:
            #  database: freshrss
            #  owner: freshrss
            #  secret:
            #    name: freshrss-basic-auth
            # use this to recover a net-new cluster from a backup
            recovery:
              source: *name
              database: freshrss
              owner: freshrss
            # # use this to 'migrate' from an existing cnpg cluster (e.g. "freshrss-postgres-v16") to the new cluster
            #initdb:
            #  database: freshrss
            #  owner: freshrss
            #  import:
            #    type: microservice
            #    databases:
            #      - freshrss
            #    source:
            #      externalCluster: freshrss-postgres-v16
          monitoring:
            enablePodMonitor: "${MONITORING_PROMETHEUS}"
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              memory: "1Gi"
          backup:
            retentionPolicy: 7d
            barmanObjectStore:
              wal:
                compression: bzip2
                maxParallel: 4
              destinationPath: s3://postgresql-${CLUSTER_NAME}
              endpointURL: "${SECRET_S3_URL}"
              serverName: *name
              s3Credentials:
                accessKeyId:
                  name: *name
                  key: s3-access-key
                secretAccessKey:
                  name: *name
                  key: s3-secret-key
          externalClusters:
            # this represents the s3 backup to restore from. Must be same version.
            - name: *name
              barmanObjectStore:
                wal:
                  compression: bzip2
                  maxParallel: 8
                destinationPath: s3://postgresql-${CLUSTER_NAME}
                serverName: *name
                endpointURL: "${SECRET_S3_URL}"
                s3Credentials:
                  accessKeyId:
                    name: *name
                    key: s3-access-key
                  secretAccessKey:
                    name: *name
                    key: s3-secret-key
            # # this represents an existing cnpg cluster to migrate from (e.g. upgrading from postgres v16 to postgres v17)
            #- name: freshrss-postgres-v16
            #  connectionParameters:
            #    host: freshrss-postgres-v16.freshrss.svc.cluster.local
            #    user: freshrss
            #    dbname: freshrss
            #    sslmode: require
            #  password:
            #    name: freshrss-basic-auth
            #    key: password
      - apiVersion: postgresql.cnpg.io/v1
        kind: ScheduledBackup
        metadata:
          name: *name
          namespace: *namespace
        spec:
          schedule: "0 37 01 * * *"
          immediate: true
          backupOwnerReference: self
          cluster:
            name: *name
